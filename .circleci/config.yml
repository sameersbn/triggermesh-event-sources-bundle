version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1
  gcp-cli: circleci/gcp-cli@1
  go: circleci/go@1
  docker: circleci/docker@1.4.0

jobs:
  gomod-cache:
    executor:
      name: go/default
      tag: '1.19.1'
    steps:
      - checkout
      - go/mod-download-cached

  build:
    executor:
      name: go/default
      tag: '1.19.1'
    steps:
      - checkout
      - go/load-cache
      - restore_cache:
          name: Restoring Go build cache
          # Multi-key caching strategy, as documented at https://circleci.com/docs/2.0/caching/.
          # All keys include the 'go.sum' checksum to ensure caches get invalidated
          # when we update either our dependencies or the Go toolchain.
          keys:
              # If a workflow gets retried, the previous run may have already
              # populated the build cache for the current revision.
              # This is the freshest cache we can get.
            - go-build-{{ arch }}-{{ checksum "go.sum" }}-{{ .Revision }}
              # Fall back to the secondary build cache.
              # Although it may not be fresh for the latest code revision, this cache
              # should at least be up-to-date for the current dependencies' versions.
            - go-build-{{ arch }}-{{ checksum "go.sum" }}
      - run:
          name: Run build
          command: make build
          environment:
            BIN_OUTPUT_DIR: /tmp/build-output/
      # Running tests populates the Go build cache.
      # We save it here to allow subsequent jobs to re-use what's already been compiled.
      - save_cache:
          name: Saving primary Go build cache
          key: go-build-{{ arch }}-{{ checksum "go.sum" }}-{{ .Revision }}
          paths:
            - ~/.cache/go-build
      - save_cache:
          name: Saving secondary Go build cache
          key: go-build-{{ arch }}-{{ checksum "go.sum" }}
          paths:
            - ~/.cache/go-build

  publish-image:
    executor:
      name: go/default
      tag: '1.19.1'
    resource_class: xlarge
    steps:
      - checkout
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: Adding Docker credHelpers for GCR
          command: gcloud auth configure-docker
      - go/load-cache
      - restore_cache:
          name: Restoring Go build cache
          keys:
            - go-build-{{ arch }}-{{ checksum "go.sum" }}-{{ .Revision }}
            - go-build-{{ arch }}-{{ checksum "go.sum" }}
      - run:
          name: Installing ko
          command: go install github.com/google/ko@v0.11.2
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true
      - run:
          name: Publishing container images and creating release manifests
          environment:
            KO_DOCKER_REPO: gcr.io/triggermesh/event-sources-bundle
            KOFLAGS: --jobs=4 # adjust based on resource_class
            DIST_DIR: /tmp/dist/
          command: |
            IMAGE_TAG=${CIRCLE_TAG:-${CIRCLE_SHA1}} make release
      - persist_to_workspace:
          root: /tmp/
          paths:
            - dist/
      - store_artifacts:
          path: /tmp/dist/

  # trigger-e2e-test:
  #   executor:
  #     name: go/default
  #     tag: '1.19.1'
  #   steps:
  #     - run:
  #         name: Sending dispatch event
  #         command: |
  #           curl \
  #             -X POST \
  #             -H "Accept: application/vnd.github+json" \
  #             -H "Authorization: token ${GITHUB_TOKEN}" \
  #             https://api.github.com/repos/triggermesh/triggermesh-event-sources-bundle/dispatches \
  #             -d '{"event_type":"e2e-test","client_payload":{"commit_sha":"'${CIRCLE_SHA1}'"}}'

  release:
    executor:
      name: go/default
      tag: '1.19.1'
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: $AWS_CLUSTER_NAME
          aws-region: $AWS_REGION
          install-kubectl: true
      - run:
          name: Installing github-release tool
          command: go install github.com/meterup/github-release@latest
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Creating GitHub release
          command: |
            PRE_RELEASE=${CIRCLE_TAG/${CIRCLE_TAG%-rc[0-9]*}/}
            github-release delete -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} 2>/dev/null ||:
            ./hack/release-notes.sh ${CIRCLE_TAG} | github-release release ${PRE_RELEASE:+-p} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} -d -

            # wait for github to report the release before attaching the artifacts
            max_tries=5
            for _ in $(seq 1 ${max_tries}); do
              github-release info -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} >/dev/null && break
              sleep 1
            done

            for f in $(find /tmp/workspace/dist/ -type f); do
              github-release upload -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} -n $(basename ${f}) -f ${f}
            done

workflows:
  test-and-publish:
    jobs:
      - gomod-cache:
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      - build:
          requires:
            - gomod-cache
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      - publish-image:
          context: production
          requires:
            - build
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              only: main
      # - trigger-e2e-test:
      #     context: production
      #     requires:
      #       - publish-image
      #     filters:
      #       tags:
      #         only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      #       branches:
      #         only: main
      - release:
          context: production
          requires:
            - publish-image
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              ignore: /.*/
